pipeline {
    agent any

    tools {
        jdk 'jdk17'            // Jenkins Global Tool configured JDK
        nodejs 'node23'        // Jenkins Global Tool configured Node.js
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner' // SonarQube scanner tool in Jenkins
        DOCKER_IMAGE = "mohdibrahimk/zomato:latest"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo "Cleaning old files..."
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                echo "Cloning source code from GitHub..."
                git branch: 'master', url: 'https://github.com/MohdKhal/DevOps-Project-Zomato-Kastro.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Running SonarQube static code analysis..."
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=zomato \
                        -Dsonar.projectName=zomato '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo "Waiting for SonarQube Quality Gate..."
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Install NPM Dependencies') {
            steps {
                echo "Installing Node.js dependencies..."
                sh 'npm install'
            }
        }

        stage('Trivy Scan') {
            steps {
                echo "Running Trivy vulnerability scan..."
                sh 'trivy fs . > trivy.txt'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${DOCKER_IMAGE}"
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "Pushing image to Docker Hub..."
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-cred') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy Container') {
            steps {
                echo "Deploying container locally on Jenkins VM..."
                sh 'docker rm -f zomato || true' // remove old container if exists
                sh 'docker run -d --name zomato -p 3000:3000 mohdibrahimk/zomato:latest'
            }
        }
    }

    post {
        always {
            echo "Sending build result email..."
            emailext(
                attachLog: true,
                subject: "Build ${currentBuild.result}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    <html>
                    <body>
                        <h2 style="color:blue;">Jenkins Build Report</h2>
                        <p><b>Project:</b> ${env.JOB_NAME}</p>
                        <p><b>Build Number:</b> ${env.BUILD_NUMBER}</p>
                        <p><b>Status:</b> ${currentBuild.result}</p>
                        <p><b>URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    </body>
                    </html>
                """,
                to: 'mohd.khaleel.in@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt'
            )
        }
    }
}
